<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:beans="http://www.springframework.org/schema/beans"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd 
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/mvc
http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">
	<aop:aspectj-autoproxy />
	
	<!--So you can use @Transactional -->
	<tx:annotation-driven />
	
	<!--Auto discovers transaction manage in default JNDI name Space -->
	<tx:jta-transaction-manager />


	<!-- Is used to activate annotations in beans already registered in the 
		application context (no matter if they were defined with XML or by package 
		scanning). -->
	<context:annotation-config />


	<!-- <context:component-scan> can also do what <context:annotation-config> 
		does but <context:component-scan> also scans packages to find and register 
		beans within the application context. -->
	<context:component-scan
		base-package="org.springframework.samples.mvc, com.parkingengine.*" />



	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location">
			<value>/WEB-INF/spring/proddatabase.properties</value>
		</property>
	</bean>

	<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName" value="jdbc/myds" />
	</bean>


	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="persistenceUnitName" value="EconDatesDB" />
		<property name="persistenceXmlLocation" value="/WEB-INF/spring/jpa-prod-persistence.xml" />
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="generateDdl" value="false" />
				<property name="databasePlatform" value="org.hibernate.dialect.MySQLDialect" />
			</bean>
		</property>
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.format_sql">false
				</prop>
				<prop key="hibernate.use_sql_comments">false
				</prop>
				<prop key="hibernate.generate_statistics">false
				</prop>
				<prop key="hibernate.transaction.factory_class">org.hibernate.engine.transaction.internal.jta.CMTTransactionFactory
				</prop>
				<!-- The following line is what's used in Hibernate 4 instead of a TransactionManagerLookup 
					class -->
				<prop key="hibernate.transaction.manager_lookup_class">com.atomikos.icatch.jta.hibernate3.TransactionManagerLookup
				</prop>

			</props>
		</property>
	</bean>


	<!-- Imports user-defined @Controller beans that process client requests -->
	<beans:import resource="/appServlet/controllers.xml" />







	<!-- From the servlet context -->
	<!-- Enables the Spring MVC @Controller programming model <annotation-driven 
		conversion-service="conversionService"> <argument-resolvers> <beans:bean 
		class="org.springframework.samples.mvc.data.custom.CustomArgumentResolver" 
		/> </argument-resolvers> </annotation-driven> -->
	<mvc:annotation-driven />

	<!-- Only needed because we install custom converters to support the examples 
		in the org.springframewok.samples.mvc.convert package -->
	<beans:bean id="conversionService"
		class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
		<beans:property name="formatters">
			<beans:bean
				class="org.springframework.samples.mvc.convert.MaskFormatAnnotationFormatterFactory" />
		</beans:property>
	</beans:bean>


</beans>